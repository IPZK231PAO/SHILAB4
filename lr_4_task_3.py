# -*- coding: utf-8 -*-
"""LR_4_task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/191Yp9-OirloZReOcJiDcY-KsKxEuFeQZ
"""

import numpy as np
from sklearn import linear_model
import sklearn.metrics as sm
from sklearn.preprocessing import PolynomialFeatures
import matplotlib.pyplot as plt

# Вхідний файл з даними
input_file = 'data_multivar_regr.txt'

# Завантаження даних
data = np.loadtxt(input_file, delimiter=',')
X, y = data[:, :-1], data[:, -1]

# Розбивка даних на навчальний та тестовий набори
num_training = int(0.8 * len(X))
num_test = len(X) - num_training

# Тренувальні дані
X_train, y_train = X[:num_training], y[:num_training]

# Тестові дані
X_test, y_test = X[num_training:], y[num_training:]

# Створення та навчання лінійного регресора
linear_regressor = linear_model.LinearRegression()
linear_regressor.fit(X_train, y_train)

# Прогнозування результату за допомогою лінійного регресора
y_test_pred_linear = linear_regressor.predict(X_test)

# Оцінка якості лінійної регресії
print("Linear Regressor performance:")
print("Mean absolute error =", round(sm.mean_absolute_error(y_test, y_test_pred_linear), 2))
print("Mean squared error =", round(sm.mean_squared_error(y_test, y_test_pred_linear), 2))
print("Median absolute error =", round(sm.median_absolute_error(y_test, y_test_pred_linear), 2))
print("Explained variance score =", round(sm.explained_variance_score(y_test, y_test_pred_linear), 2))
print("R2 score =", round(sm.r2_score(y_test, y_test_pred_linear), 2))

# Створення поліноміального регресора ступеня 10
polynomial = PolynomialFeatures(degree=10)
X_train_transformed = polynomial.fit_transform(X_train)

# Навчання поліноміального регресора
poly_linear_model = linear_model.LinearRegression()
poly_linear_model.fit(X_train_transformed, y_train)

# Прогнозування за допомогою поліноміального регресора
y_test_pred_poly = poly_linear_model.predict(polynomial.transform(X_test))

# Оцінка якості поліноміального регресора
print("\nPolynomial Regressor performance:")
print("Mean absolute error =", round(sm.mean_absolute_error(y_test, y_test_pred_poly), 2))
print("Mean squared error =", round(sm.mean_squared_error(y_test, y_test_pred_poly), 2))
print("Median absolute error =", round(sm.median_absolute_error(y_test, y_test_pred_poly), 2))
print("Explained variance score =", round(sm.explained_variance_score(y_test, y_test_pred_poly), 2))
print("R2 score =", round(sm.r2_score(y_test, y_test_pred_poly), 2))

# Вибірковий набір даних для прогнозу
datapoint = [[7.75, 6.35, 5.56]]

# Перетворення даних у поліноміальну форму
poly_datapoint = polynomial.transform(datapoint)

# Прогноз за допомогою лінійного регресора
print("\nLinear regression prediction for datapoint:", linear_regressor.predict(datapoint))

# Прогноз за допомогою поліноміального регресора
print("Polynomial regression prediction for datapoint:", poly_linear_model.predict(poly_datapoint))