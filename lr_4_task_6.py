# -*- coding: utf-8 -*-
"""LR_4_task_6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/191Yp9-OirloZReOcJiDcY-KsKxEuFeQZ
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline

# 1. Створення даних
m = 100
X = np.linspace(-3, 3, m).reshape(-1, 1)  # Перетворення X на 2D масив
y = 2 * np.sin(X).flatten() + np.random.uniform(-0.5, 0.5, m)  # .flatten() для перетворення y в 1D масив

# 2. Функція для побудови кривих навчання
def plot_learning_curves(model, X, y):
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)
    train_errors, val_errors = [], []
    for m in range(1, len(X_train)):
        model.fit(X_train[:m], y_train[:m])
        y_train_predict = model.predict(X_train[:m])
        y_val_predict = model.predict(X_val)
        train_errors.append(mean_squared_error(y_train_predict, y_train[:m]))
        val_errors.append(mean_squared_error(y_val_predict, y_val))

    # Графік кривих навчання
    plt.plot(np.sqrt(train_errors), "r-+", linewidth=2, label="train")
    plt.plot(np.sqrt(val_errors), "b-", linewidth=3, label="val")
    plt.xlabel("Training set size")
    plt.ylabel("RMSE")
    plt.legend()

# 3. Лінійна регресія
lin_reg = LinearRegression()
plt.figure(figsize=(10, 6))
plt.title("Learning Curves for Linear Regression")
plot_learning_curves(lin_reg, X, y)
plt.show()

# 4. Поліноміальна регресія (2-го ступеня)
polynomial_regression = Pipeline([
    ("poly_features", PolynomialFeatures(degree=2, include_bias=False)),
    ("lin_reg", LinearRegression()),
])

plt.figure(figsize=(10, 6))
plt.title("Learning Curves for Polynomial Regression (Degree 2)")
plot_learning_curves(polynomial_regression, X, y)
plt.show()